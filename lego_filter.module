<?php

function lego_filter_help($section) {
  if ($section == 'admin/modules#description')
    return t('Allow "part", "element" and "set" tags in posts.');
}

/**
 * Implementation of hook_menu().
 */
function lego_filter_menu()
{
  $items['brick_filter/part/%/color'] = array(
    'page callback' => 'lego_filter_part',
    'page arguments' => array(
      2,
      4,
    ),
    'access arguments' => array('view set and part tags'),
  );
  $items['brick_filter/element/%'] = array(
    'page callback' => 'lego_filter_element',
    'page arguments' => array(
      2,
    ),
    'access arguments' => array('view set and part tags'),
  );
  $items['brick_filter/set/%'] = array(
    'page callback' => 'lego_filter_set',
    'page arguments' => array(
      2,
    ),
    'access arguments' => array('view set and part tags'),
  );
  $items['brick_filter/test/sets'] = array(
    'title' => 'Brick FIlter Test - Sets',
    'page callback' => 'lego_filter_test_set',
    'access arguments' => array('view set and part tags'),
  );
  return $items;
}

function lego_filter_perm()
{
  return array(
    'view set and part tags',
  );
}

function lego_filter_filter_tips($delta, $format, $long = false) {

  if ($long) {
    include_once(drupal_get_path('module', 'lego_filter') .'/lego_filter_help.inc');
    return _lego_filter_tip();
  }
  else {
    $output = t('You can use !Part tags in the text.', array('!Part' =>  l(t('[part]'), "filter/tips/$format", array('fragment' => 'filter-lego_filter-' . $delta))));
    return $output;
  }
}

function lego_filter_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('LEGO Filter'));

    case 'description':
      return t('Converts [set] and [part] tags to HTML.');

    case 'process':
      include_once(drupal_get_path('module', 'lego_filter') .'/lego_filter_filter.inc');
      return _lego_filter_process($text, $format);

    case 'settings':
      $form = array();
      $form['lego_filter'] = array(
        '#type' => 'fieldset', 
        '#title' => t('LEGO filter'), 
        '#collapsible' => TRUE, 
        '#collapsed' => FALSE);
      $form['lego_filter']["rebrickable_api_key"] = array(
        '#type' => 'textfield', 
        '#title' => t('Rebrickable API Key'), 
        '#default_value' => variable_get("rebrickable_api_key", ''), 
        '#description' => t('API Key from rebrickable.com, required for data lookups.'));
      $form['lego_filter']["brickset_api_key"] = array(
        '#type' => 'textfield', 
        '#title' => t('Brickset API Key'), 
        '#default_value' => variable_get("brickset_api_key", ''), 
        '#description' => t('API Key from brickset.com, required for data lookups.'));
      $form['lego_filter']["brickcat_api_key"] = array(
        '#type' => 'textfield', 
        '#title' => t('BrickCat API Key'), 
        '#default_value' => variable_get("brickcat_api_key", ''), 
        '#description' => t('API Key from brickcat.com, required for data lookups.'));
      $form['lego_filter']["brickcat_country"] = array(
        '#type' => 'textfield', 
        '#title' => t('BrickCat Country'), 
        '#default_value' => variable_get("brickcat_country", ''), 
        '#description' => t('2-char country code for BrickCat lookups.'));
      return $form;

    default:
      return $text;
  }
}

/**
 * Implements of hook_preprocess_page()
 */
function lego_filter_preprocess_page(&$variables)
{
  $module_path = drupal_get_path('module', 'lego_filter');
  drupal_add_css($module_path . '/css/lego_filter.css');
  $variables['styles'] = drupal_get_css();
}

/**
 * Implements of hook_init()
 */
function lego_filter_init()
{
  $module_path = drupal_get_path('module', 'lego_filter');
  drupal_add_js($module_path . '/js/brick_filter.js', 'module', 'header');
}


function lego_filter_part($part, $color)
{
  // Print out HTML directly.
  include_once(drupal_get_path('module', 'lego_filter') .'/lego_filter_filter.inc');
  print (_lego_part_snippit($part, $color));
  // Return success.
  exit(0);
}

function lego_filter_element($element)
{
  // Print out HTML directly.
  include_once(drupal_get_path('module', 'lego_filter') .'/lego_filter_filter.inc');
  print (_lego_element_snippit($element, $color));
  // Return success.
  exit(0);
}

function lego_filter_set($set)
{
  // Print out HTML directly.
  include_once(drupal_get_path('module', 'lego_filter') .'/lego_filter_filter.inc');
  print (_lego_set_snippit($set));
  // Return success.
  exit(0);
}

function lego_filter_test_set()
{
  include_once(drupal_get_path('module', 'lego_filter') .'/lego_filter_filter.inc');
  $content = "<div>This page is to test LEGO set tags.</div>";
  $content .= '<div>Checking Key' . file_get_contents(_lego_brickset_check_url()) . '</div>';
  $content .= '<div>Rebrickable set results: ' . print_r(_lego_rebrickable_set_fetch('928-1'), TRUE) . '</div>';
  return $content;
}

